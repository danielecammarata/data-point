// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Factory#create 1`] = `
"Schema validation failed with the following errors:
[
  {
    \\"keyword\\": \\"enum\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/definitions/simpleTypes/enum\\",
    \\"params\\": {
      \\"allowedValues\\": [
        \\"array\\",
        \\"boolean\\",
        \\"integer\\",
        \\"null\\",
        \\"number\\",
        \\"object\\",
        \\"string\\"
      ]
    },
    \\"message\\": \\"should be equal to one of the allowed values\\"
  },
  {
    \\"keyword\\": \\"type\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/properties/type/anyOf/1/type\\",
    \\"params\\": {
      \\"type\\": \\"array\\"
    },
    \\"message\\": \\"should be array\\"
  },
  {
    \\"keyword\\": \\"anyOf\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/properties/type/anyOf\\",
    \\"params\\": {},
    \\"message\\": \\"should match some schema in anyOf\\"
  }
]"
`;

exports[`Factory#validateSchema 1`] = `
"Schema validation failed with the following errors:
[
  {
    \\"keyword\\": \\"type\\",
    \\"dataPath\\": \\"\\",
    \\"schemaPath\\": \\"#/type\\",
    \\"params\\": {
      \\"type\\": \\"object,boolean\\"
    },
    \\"message\\": \\"should be object,boolean\\"
  }
]"
`;

exports[`Factory#validateSchema 2`] = `
"Schema validation failed with the following errors:
[
  {
    \\"keyword\\": \\"enum\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/definitions/simpleTypes/enum\\",
    \\"params\\": {
      \\"allowedValues\\": [
        \\"array\\",
        \\"boolean\\",
        \\"integer\\",
        \\"null\\",
        \\"number\\",
        \\"object\\",
        \\"string\\"
      ]
    },
    \\"message\\": \\"should be equal to one of the allowed values\\"
  },
  {
    \\"keyword\\": \\"type\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/properties/type/anyOf/1/type\\",
    \\"params\\": {
      \\"type\\": \\"array\\"
    },
    \\"message\\": \\"should be array\\"
  },
  {
    \\"keyword\\": \\"anyOf\\",
    \\"dataPath\\": \\".type\\",
    \\"schemaPath\\": \\"#/properties/type/anyOf\\",
    \\"params\\": {},
    \\"message\\": \\"should match some schema in anyOf\\"
  }
]"
`;
